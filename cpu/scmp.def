// *******************************************************************************************************************************************************************
// *******************************************************************************************************************************************************************
//
//																			SC/MP 4k Core
// 																			=============
//
//
//	%O 			opcode & 3, PC for 0
//	%P 			opcode & 3
//
//	a,e,s,carry,overflow	 		(8 bit, carry and overflow values are either 0 or 1)
//	p0,p1,p2,p3 					(16 bit)
//	opcode, operand 				(Pre read code)
//
// *******************************************************************************************************************************************************************
// *******************************************************************************************************************************************************************

// *******************************************************************************************************************************************************************
//																			Memory Reference
// *******************************************************************************************************************************************************************

C0-C3 	18	"LD @1(%O)" 	a = readByte(eacRelative(operand,p%P))
C5-C7 	18 	"LD |@1(%O)"	a = readByte(eacAutoIndex(operand,&p%P))

C8-CB 	18	"ST @1(%O)"		writeByte(eacRelative(operand,p%P),a)
CD-CF 	18	"ST |@1(%O)" 	writeByte(eacAutoIndex(operand,&p%P),a)

D0-D3 	18	"AND @1(%O)" 	a = a & readByte(eacRelative(operand,p%P))
D5-D7 	18	"AND |@1(%O)"	a = a & readByte(eacAutoIndex(operand,&p%P))

D8-DB 	18	"OR @1(%O)" 	a = a | readByte(eacRelative(operand,p%P))
DD-DF 	18	"OR |@1(%O)"	a = a | readByte(eacAutoIndex(operand,&p%P))

E0-E3 	18	"XOR @1(%O)" 	a = a ^ readByte(eacRelative(operand,p%P))
E5-E7 	18	"XOR |@1(%O)"	a = a ^ readByte(eacAutoIndex(operand,&p%P))

E8-EB 	23	"DAD @1(%O)" 	a = decimalAdd(a,readByte(eacRelative(operand,p%P)))
ED-EF 	23	"DAD |@1(%O)"	a = decimalAdd(a,readByte(eacAutoIndex(operand,&p%P)))

F0-F3 	19	"ADD @1(%O)" 	a = binaryAdd(a,readByte(eacRelative(operand,p%P)))
F5-F7 	19	"ADD |@1(%O)"	a = binaryAdd(a,readByte(eacAutoIndex(operand,&p%P)))

F8-FB 	20 	"CAD @1(%O)" 	a = binaryAdd(a,0xFF ^ readByte(eacRelative(operand,p%P)))
FD-FF 	20	"CAD |@1(%O)"	a = binaryAdd(a,0xFF ^ readByte(eacAutoIndex(operand,&p%P)))

// *******************************************************************************************************************************************************************
//																			Immediate Instructions
// *******************************************************************************************************************************************************************

C4 		10	"LDI @1"			a = operand
D4 		10	"ANI @1"			a = a & operand
DC 		10	"ORI @1"			a = a | operand
E4 		10	"XRI @1"			a = a ^ operand
EC 		15	"DAI @1"			a = decimalAdd(a,operand)
F4 		11	"ADI @1"			a = binaryAdd(a,operand)
FC 		12	"CAI @1"			a = binaryAdd(a,0xFF ^ operand)

// *******************************************************************************************************************************************************************
//																			Transfer Instructions
// *******************************************************************************************************************************************************************

90-93 	11	"JMP @1(%O)"	branch(eacRelative(operand,p%P))
94-97 	10	"JP @1(%O)"		if ((a & 0x80) == 0) branch(eacRelative(operand,p%P))
98-9B 	10	"JZ @1(%O)"		if (a == 0)  branch(eacRelative(operand,p%P))
9C-9F 	10	"JNZ @1(%O)"	if (a != 0)  branch(eacRelative(operand,p%P))

// *******************************************************************************************************************************************************************
//																Memory Increment/Decrement instructions
// *******************************************************************************************************************************************************************

A8-AB 	22	"ILD @1(%O)"	temp16 = eacRelative(operand,p%P);a = (readByte(temp16)+1) & 0xFF;writeByte(temp16,a)
B8-BB 	22	"DLD @1(%O)"	temp16 = eacRelative(operand,p%P);a = (readByte(temp16)-1) & 0xFF;writeByte(temp16,a)

// *******************************************************************************************************************************************************************
//																	Extension Register Instructions
// *******************************************************************************************************************************************************************

40 		6 	"LDE"			a = e
01 		7 	"XAE"			temp8 = a;a = e;e = temp8
50 		6 	"ANE"			a = a & e
58 		6 	"ORE"			a = a | e
60 		6 	"XRE"			a = a ^ e
68 		11	"DAE"			a = decimalAdd(a,e)
70 		7 	"ADE"			a = binaryAdd(a,e)
78 		8 	"CAE"			a = binaryAdd(a,e ^ 0xFF)

// *******************************************************************************************************************************************************************
//																  Pointer Register Move Instructions
// *******************************************************************************************************************************************************************

30 		8 	"XPAL 0"		temp8 = p0 & 0xFF;p0 = (p0 & 0xFF00) | a;a = temp8; branch(p0);
31-33 	8 	"XPAL %P"		temp8 = p%P & 0xFF;p%P = (p%P & 0xFF00) | a;a = temp8;

34 		8 	"XPAH 0"		temp8 = (p0 >> 8) & 0xFF;p0 = (p0 & 0xFF) | (((WORD16)a) << 8);a = temp8; branch(p0);
35-37 	8 	"XPAH %P"		temp8 = (p%P >> 8) & 0xFF;p%P = (p%P & 0xFF) | (((WORD16)a) << 8);a = temp8;

3C 		7 	"XPPC 0"		{}
3D-3F 	7 	"XPPC %P"		temp16 = p%P;p%P = p0;p0 = temp16; branch(p0)


// *******************************************************************************************************************************************************************
//															Shift, Rotate, Serial I/O Instructions
// *******************************************************************************************************************************************************************

19 		5 	"SIO"			e = (e >> 1) & 0x7F
1C 		5 	"SR"			a = (a >> 1) & 0x7F
1D 		5 	"SRL" 			a = a >> 1;if (carry != 0) a = a | 0x80
1E 		5 	"RR"			a = (a >> 1) | ((a & 1) << 7)
1F 		5 	"RRL"			temp16 = a;if (carry != 0) temp16 |= 0x80;a = (temp16 >> 1) & 0xFF;carry = temp16 & 1

// *******************************************************************************************************************************************************************
//																Miscellaneous Instructions
// *******************************************************************************************************************************************************************

00 		8 	"HALT" 			{}
02 		5 	"CCL" 			carry = 0
03 		5 	"SCL"			carry = 1
04 		6 	"DINT" 			s = s & 0xF7
05 		6 	"IEN"			s = s | 0x08
06 		5 	"CSA" 			a = constructStatus()
07 		6 	"CAS"			s = a;writeIOFlags(s & 7);overflow = (s & 0x40) >> 6;carry = (s & 0x80) >> 7;
08 		5 	"NOP"			{}
8F 		0 	"DLY @1"		longDelay(operand,a);a = 0

:static BYTE8 a,carry,overflow,e,s,temp8;
:static WORD16 p0,p1,p2,p3,temp16;

:static BYTE8 constructStatus(void)  {
: 	return (s & 0xF) | ((readSenseLines() & 0x3) << 4) | (overflow << 6) | (carry << 7);
:}

:static void resetProcessor() {
:	a = e = overflow = carry = s = 0;
:	p0 = p1 = p2 = p3 = 0;
:	branch(p0);writeIOFlags(0);
:}

:static BYTE8 decimalAdd(BYTE8 d1,BYTE8 d2) {
:	BYTE8 lsd,msd;
:	lsd = (d1 & 0xF) + (d2 & 0xF) + carry;
:	msd = ((d1 >> 4) & 0xF) + ((d2 >> 4) & 0xF);
: 	carry = 0;
: 	if (lsd >= 10) { msd++;lsd = lsd - 10; }
:	if (msd >= 10) { carry = 1;msd = msd - 10; }
:	return lsd + (msd << 4);
:}

:static BYTE8 binaryAdd(BYTE8 d1,BYTE8 d2) {
:	WORD16 result = d1 + d2 + ((carry != 0) ? 1 : 0);
:	carry = (result >= 0x100) ? 1 : 0;
:	overflow = 0;
:	if ((d1 & 0x80) == (d2 & 0x80) && (d1 & 0x80) != (result & 0x80)) overflow = 1;
:	return (BYTE8)(result & 0xFF);
:}

:static WORD16 eacRelative(BYTE8 offset,WORD16 pointer) {
:	if (offset == 0x80) offset = e;
:	if (offset & 0x80) 
:		return addAddress(pointer,offset - 0x100);
: 	return addAddress(pointer,offset);	
:}
:
:static WORD16 eacAutoIndex(BYTE8 offset,WORD16 *pPointer) {
:	if (offset == 0x80) offset = e;
:	if (offset & 0x80) {
:		*pPointer = addAddress(*pPointer,offset - 0x100);
:		return *pPointer;
:	} else {
:		WORD16 address = *pPointer;
:		*pPointer = addAddress(*pPointer,offset);
:		return address;
:	}	
:}